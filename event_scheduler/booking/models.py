from django.db import models
from django.templatetags.static import static

class Venue(models.Model):
    name = models.CharField(max_length=200)
    address = models.TextField()
    capacity = models.PositiveIntegerField()
    photo = models.ImageField(upload_to='venues/', blank=True, null=True)

    def __str__(self):
        return self.name

class Event(models.Model):
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π 
    CATEGORY_CHOICES = [
        ('MUSIC', 'üéµ –ú—É–∑—ã–∫–∞'),
        ('SPORT', '‚öΩ –°–ø–æ—Ä—Ç'),
        ('ART', 'üé® –ò—Å–∫—É—Å—Å—Ç–≤–æ'),
        ('FOOD', 'üçî –ï–¥–∞'),
        ('TECH', 'üíª –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏'),
        ('BUSINESS', 'üíº –ë–∏–∑–Ω–µ—Å'),
    ]
    
    title = models.CharField(max_length=200)
    venue = models.ForeignKey(Venue, on_delete=models.CASCADE)
    date = models.DateTimeField()
    price = models.DecimalField(max_digits=10, decimal_places=2)
    description = models.TextField()
    photo = models.ImageField(upload_to='events/', blank=True, null=True)
    is_active = models.BooleanField(default=True)
    is_featured = models.BooleanField(default=False)
    # total_seats = models.PositiveIntegerField()
    available_seats = models.PositiveIntegerField(default=50)
    
    category = models.CharField(
        max_length=10,
        choices=CATEGORY_CHOICES,
        default='MUSIC',
        verbose_name='–ö–∞—Ç–µ–≥–æ—Ä–∏—è'
    )

    def get_photo_url(self):
        if self.photo:
            return self.photo.url
        return static('images/default_event.jpg')

    def get_category_display(self):
        return dict(self.CATEGORY_CHOICES).get(self.category, self.category)
    
    def get_category_class(self):
        return self.category.lower()

    def __str__(self):
        return f"{self.title} ({self.get_category_display()})"

    class Meta:
        ordering = ['date']
        verbose_name = '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ'
        verbose_name_plural = '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'
        
     
class Booking(models.Model):
    user = models.ForeignKey(
        'users.User',  
        on_delete=models.CASCADE,  # –£–¥–∞–ª—è—Ç—å –±—Ä–æ–Ω–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        related_name='bookings', 
        verbose_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    )
    
    event = models.ForeignKey(
        'booking.Event',  
        on_delete=models.CASCADE,  # –£–¥–∞–ª—è—Ç—å –±—Ä–æ–Ω–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        verbose_name="–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"
    )
    
    created_at = models.DateTimeField(auto_now_add=True)
    is_cancelled = models.BooleanField(default=False) # –ü–æ—Ç–æ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å –æ—Ç–º–µ–Ω—É –±—Ä–æ–Ω–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    is_paid = models.BooleanField(default=False, verbose_name="–û–ø–ª–∞—á–µ–Ω–æ")
    payment_date = models.DateTimeField(null=True, blank=True, verbose_name="–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã")
    
    
    class Meta:
        verbose_name = "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"
        verbose_name_plural = "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"
        ordering = ['-created_at']
       
        
    